import pandas as pd
import requests
from io import StringIO
from typing import List, Dict, Any, Optional

# URL de exportación CSV de la hoja de cálculo de Google Sheets
GOOGLE_SHEETS_EXPORT_URL = "https://docs.google.com/spreadsheets/d/1EK96qUKEW2dfnRBT7NfeVouAFouUXDOvHRVVGJ8gs34/export?format=csv&gid=966198883"


# -----------------------------------------------------------------------------
## PARTE 1: FUNCIÓN DE CARGA DE DATOS

def load_google_sheet_data(url: str) -> pd.DataFrame:
    """Carga datos directamente desde la URL de exportación CSV de Google Sheets."""
    print(f"Intentando cargar datos desde: {url}")
    try:
        response = requests.get(url)
        # Lanza una excepción para códigos de estado de error (4xx o 5xx)
        response.raise_for_status()
        
        # Usamos StringIO para tratar la respuesta del texto como un archivo
        return pd.read_csv(StringIO(response.text))
    except requests.exceptions.RequestException as e:
        # En caso de error de conexión o acceso (ej. hoja no es pública)
        print(f"❌ Error al intentar cargar la hoja de Google: {e}")
        print("Retornando un DataFrame vacío o simulado.")
        # Se retorna un DataFrame vacío como fallback.
        return pd.DataFrame() 

# -----------------------------------------------------------------------------
## CARGA Y VERIFICACIÓN DE LA INFORMACIÓN

# Cargar la tabla principal (Origen{[name="NUEVO DESEMPEÑO",...})
df_desempeno_table_raw = load_google_sheet_data(GOOGLE_SHEETS_EXPORT_URL)

# Imprimir la información cargada
print("\n--- INFORMACIÓN CARGADA EN df_desempeno_table_raw ---")
print(df_desempeno_table_raw.head())
print(f"\nDimensiones: {df_desempeno_table_raw.shape}")
print("-----------------------------------------------------")


# Simulación de la tabla de catálogo (Cat_DiasLaborablesCapacidad)
# Se necesita para que el resto del código no falle, aunque no se usa para la impresión de la carga.
df_cat_laborales = pd.DataFrame({'Col_A_Temp': ['Dia1', 'Dia2', 'Dia3'], 'Col_B_Temp': [7, 8, 9]})


# -----------------------------------------------------------------------------
## PARTE 2: TRANSFORMACIONES DE DATOS (Lógica Power Query)

# NOTA: Esta lógica solo se ejecutará si df_desempeno_table_raw no está vacío.
if not df_desempeno_table_raw.empty and df_desempeno_table_raw.shape[1] > 11:

    # 1. #"Otras columnas quitadas" (Table.SelectColumns)
    # Column2 (índice 1), Column12 (índice 11)
    df_cols_quitadas = df_desempeno_table_raw.iloc[:, [1, 11]].copy()

    # 2. #"Filas filtradas" (Table.SelectRows)
    df_filas_filtradas = df_cols_quitadas[
        (df_cols_quitadas.iloc[:, 1].astype(str) != "") & 
        (df_cols_quitadas.iloc[:, 1].astype(str) != "-")
    ].copy()

    # 3. #"Encabezados promovidos" (Table.PromoteHeaders)
    new_headers = df_filas_filtradas.iloc[0].tolist() 
    df_promovidos = df_filas_filtradas[1:].copy()
    df_promovidos.columns = new_headers
    df_promovidos = df_promovidos.reset_index(drop=True)

    # 4. #"Consulta anexada" (Table.Combine)
    if len(new_headers) == len(df_cat_laborales.columns):
        df_cat_laborales.columns = new_headers 

        resultado = pd.concat