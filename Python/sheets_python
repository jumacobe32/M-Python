import pandas as pd
import numpy as np
from io import StringIO

# --- Configuration ---
SHEET_ID = '1EK96qUKEW2dfnRBT7NfeVouAFouUXDOvHRVVGJ8gs34'
GID_DESEMPENHO = '2' # Asumiendo que GID '0' es "NUEVO DESEMPE√ëO"
URL_DESEMPENHO = f'https://docs.google.com/spreadsheets/d/{SHEET_ID}/gviz/tq?tqx=out:csv&gid={GID_DESEMPENHO}'
FILE_INVENTARIOS = 'Datos de power bi.xlsx - NUEVO DESEMPE√ëO INVENTARIOS.csv'


# --- 1. PRE-PROCESAMIENTO: Cargar y transformar Inventarios (ConceptosInventarios) ---

print(f"Cargando y pre-procesando Inventarios desde el archivo: {FILE_INVENTARIOS}...")
df_inventarios_unpivoted = pd.DataFrame() 

try:
    df_inventarios = pd.read_csv(FILE_INVENTARIOS)
    
    # Limpiar y renombrar columnas
    df_inventarios.columns = [col.strip() for col in df_inventarios.columns]
    df_inventarios_clean = df_inventarios.rename(columns={
        'VALOR TOPE': 'TOPE', 
        'VALOR PLANTA': 'PLANTA', 
        'VALOR TRANSITO': 'TRANSITO'
    }, errors='raise', inplace=False).copy()
    
    # Columnas ID y Value para el MELT de Inventarios
    inv_id_vars = ['CONCEPTO', 'UNIDAD', 'SECCION', 'ORDEN', 'CONCEPTO 2', 'DIAS LABORABLES']
    inv_value_vars = ['TOPE', 'PLANTA', 'TRANSITO'] 
    
    df_inventarios_unpivoted = df_inventarios_clean.melt(
        id_vars=[col for col in inv_id_vars if col in df_inventarios_clean.columns],
        value_vars=inv_value_vars,
        var_name="TIPO SALDO",
        value_name="CONCEPTO REPORTE"
    ).astype(str).replace({'<NA>': ''})

    # Convertir a min√∫sculas temporalmente para asegurar que 'dias laborables' no sea problema en la concatenaci√≥n
    df_inventarios_unpivoted.columns = [col.upper() for col in df_inventarios_unpivoted.columns]
    df_inventarios_unpivoted = df_inventarios_unpivoted.rename(columns={'DIAS LABORABLES': 'DIAS LABORABLES INVENTARIOS'}, errors='ignore')
    
    print(f"‚úÖ Data de Inventarios procesada. Filas: {len(df_inventarios_unpivoted)}")

except Exception as e:
    print(f"‚ùå Error al cargar/procesar Inventarios: {e}")
    df_inventarios_unpivoted = pd.DataFrame()


# --- 2. Definir la funci√≥n de transformaci√≥n de la tabla principal (DESEMPE√ëO) ---

def transform_sheet(url, df_inventarios_unpivoted):
    """Procesa el sheet DESEMPE√ëO 360 y lo combina con la tabla de Inventarios."""
    
    try:
        # Cargar la data completa sin encabezados
        Origen = pd.read_csv(url, header=None)
        df = Origen.copy()

        # 1. Columnas quitadas {"Column1"} (la primera columna, √≠ndice 0)
        df = df.drop(columns=[0], errors='ignore') 
        
        # --- CORRECCI√ìN CR√çTICA: Detecci√≥n y Promoci√≥n de Encabezados (robusta) ---
        
        # El encabezado buscado es 'CONCEPTO'
        header_row_index = -1
        # Se busca la fila que contiene 'CONCEPTO' en la primera columna visible (ahora √≠ndice 0)
        # Hacemos una limpieza ligera y buscamos la posici√≥n del texto 'CONCEPTO'
        header_candidates = df[df.iloc[:, 0].astype(str).str.strip().str.upper() == 'CONCEPTO'].index.tolist()
        
        if not header_candidates:
             # Si no lo encuentra directamente, buscar la fila con la mayor√≠a de las columnas requeridas (FALLBACK)
             raise ValueError("No se encontr√≥ la fila de encabezado 'CONCEPTO'.")
        
        # Usar la primera fila que coincide (seg√∫n el snippet, es la fila despu√©s de las celdas vac√≠as)
        header_row_index = header_candidates[0]

        # 2. #"Encabezados promovidos" (Promote Headers)
        new_header = df.iloc[header_row_index] 
        df = df[header_row_index + 1:].copy() 
        df.columns = new_header
        
        # Limpiar y estandarizar nombres de columna
        df.columns = [str(col).strip() if pd.notna(col) and str(col).strip() != '' else f'Unnamed_{i}' 
                      for i, col in enumerate(df.columns)]
        
        # Asegurar el nombre 'CONCEPTO'
        if df.columns[0] != 'CONCEPTO':
            df = df.rename(columns={df.columns[0]: 'CONCEPTO'}, errors='ignore')
             
        # 3. #"Filas filtradas1" y #"Filas filtradas2"
        # Eliminar filas donde CONCEPTO es vac√≠o o la palabra CONCEPTO
        df = df[df['CONCEPTO'].astype(str).str.strip() != ''].copy()
        df = df[df['CONCEPTO'] != 'CONCEPTO'].copy()
        
        # Convertir todos los valores a string antes de continuar para simplificar el flujo (como Power Query)
        df = df.apply(lambda x: x.astype(str).str.strip().replace({'nan': '', 'None': ''}), axis=0)
        df = df.replace({'<NA>': '', 'None': '', 'nan': ''})
            
        # 4. #"Otras columnas quitadas1"
        selected_cols = ["CONCEPTO", "REAL", "META", "UNIDAD", "SECCION", "ORDEN", "CONCEPTO 2", "CAPACIDAD", "CAPACIDAD 91", "CONCEPTO CAPACIDAD"]
        cols_to_keep = [col for col in selected_cols if col in df.columns]
        df = df[cols_to_keep].copy()

        # 5. #"Tipo cambiado"
        if 'ORDEN' in df.columns:
            # Coercionar a Int64 permite nulos (NA), manteniendo la columna num√©rica
            df['ORDEN'] = pd.to_numeric(df['ORDEN'].replace('', np.nan), errors='coerce').astype('Int64')
        # Las otras columnas ya son string por la conversi√≥n masiva anterior.

        # 6. #"Columna de anulaci√≥n de dinamizaci√≥n" (melt de tabla principal)
        id_vars = ["CONCEPTO", "UNIDAD", "SECCION", "ORDEN", "CONCEPTO 2", "CONCEPTO CAPACIDAD"]
        id_vars_existing = [col for col in id_vars if col in df.columns]
        value_vars = [col for col in df.columns if col not in id_vars_existing]

        df_unpivoted = df.melt(
            id_vars=id_vars_existing,
            value_vars=value_vars,
            var_name="TIPO SALDO",
            value_name="CONCEPTO REPORTE"
        )
        
        # Asegurar que la columna 'CONCEPTO REPORTE' sea string despu√©s del melt para el filtro final
        df_unpivoted['CONCEPTO REPORTE'] = df_unpivoted['CONCEPTO REPORTE'].astype(str)

        # 7. #"Consulta anexada" (Table.Combine)
        df_unpivoted.columns = [col.upper() for col in df_unpivoted.columns]
        
        # Ajustar ConceptosInventarios para que coincida con la estructura de df_unpivoted
        df_inventarios_unpivoted_adjusted = df_inventarios_unpivoted.copy()
        final_columns = df_unpivoted.columns.tolist()

        for col in final_columns:
            if col not in df_inventarios_unpivoted_adjusted.columns:
                # Llenar las columnas faltantes (como 'CAPACIDAD', 'CAPACIDAD 91', 'DIAS LABORABLES') con cadenas vac√≠as
                df_inventarios_unpivoted_adjusted[col] = '' 

        # Asegurar el orden de columnas antes de la concatenaci√≥n
        df_inventarios_unpivoted_adjusted = df_inventarios_unpivoted_adjusted[final_columns]
        
        df_combined = pd.concat([df_unpivoted, df_inventarios_unpivoted_adjusted], ignore_index=True)

        # 8. #"Filas filtradas" (Final Filter)
        # El problema del vac√≠o se resuelve aqu√≠: el filtro debe eliminar los Nulos o vac√≠os del melt.
        df_final = df_combined[
            (df_combined['CONCEPTO REPORTE'].astype(str).str.strip() != '') &
            (df_combined['CONCEPTO REPORTE'].astype(str).str.strip() != '-')
        ].copy()

        return df_final

    except Exception as e:
        print(f"‚ùå Error CR√çTICO al procesar la tabla principal (GID {GID_DESEMPENHO}): {type(e).__name__}: {e}")
        return pd.DataFrame() 

# --- 3. Ejecutar la transformaci√≥n para GID 0 ---
print(f"\nIniciando procesamiento de la pesta√±a 'NUEVO DESEMPE√ëO' (GID: {GID_DESEMPENHO}) con l√≥gica mejorada...")
result_df = transform_sheet(URL_DESEMPENHO, df_inventarios_unpivoted)

if result_df is not None and not result_df.empty:
    print("\n" + "=" * 60)
    print(f"‚úÖ Pesta√±a 'NUEVO DESEMPE√ëO' (GID {GID_DESEMPENHO}) procesada exitosamente.")
    print(f"N√∫mero de filas en el resultado final: {len(result_df)}")
    print("CONTENIDO FINAL DEL DATAFRAME COMBINADO (primeras 5 filas):")
    print("=" * 60)
    # Imprimir las primeras filas
    print(result_df.head().to_markdown(index=False, numalign="left", stralign="left")) 
    print("\n" + "=" * 60)
else:
    print(f"üõë Pesta√±a 'NUEVO DESEMPE√ëO' (GID {GID_DESEMPENHO}) sigue devolviendo un DataFrame vac√≠o. Revise la estructura de la hoja de Google Sheets en la URL proporcionada.")