import pandas as pd
import io
import requests
import json
from typing import List, Dict, Any, Optional
from pathlib import Path

# URL de exportaci√≥n CSV de la hoja de c√°lculo de Google Sheets
# GID del archivo original: 966198883
GOOGLE_SHEETS_EXPORT_URL = "https://docs.google.com/spreadsheets/d/1EK96qUKEW2dfnRBT7NfeVouAFouUXDOvHRVVGJ8gs34/export?format=csv&gid=966198883"

# Columnas finales requeridas para la selecci√≥n inicial
COLUMNAS_FINALES = ["CONCEPTO", "VALOR TOPE", "VALOR PLANTA", "VALOR TRANSITO", "UNIDAD", "SECCION", "ORDEN", "CONCEPTO 2"]
# Columnas a mantener est√°ticas durante el Unpivot
ID_VARS_UNPIVOT = ["CONCEPTO", "UNIDAD", "SECCION", "ORDEN", "CONCEPTO 2", "CONCEPTO CAPACIDAD"]

# --- FUNCI√ìN PRINCIPAL DE TRANSFORMACI√ìN ---

def transformar_hoja_datos():
    """Realiza la secuencia de transformaciones de Power Query con Pandas."""
    
    print("Iniciando la extracci√≥n de Google Sheets...")
    
    # Origen = GoogleSheets.Contents(...)
    try:
        response = requests.get(GOOGLE_SHEETS_EXPORT_URL)
        response.raise_for_status()
        
        # Lee la respuesta como un archivo CSV
        # header=None fuerza a que no promueva encabezados inicialmente
        df_origen = pd.read_csv(io.StringIO(response.text), header=None)
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error al obtener datos de Google Sheets: {e}")
        return pd.DataFrame()
    except Exception as e:
        print(f"‚ùå Error al leer o procesar los datos: {e}")
        return pd.DataFrame()

    # Identificamos la fila de encabezados (asumimos la primera fila, que es la fila 0)
    df_origen.columns = df_origen.iloc[0].str.strip().str.upper()
    df_paso = df_origen[1:].copy() # El DataFrame comienza desde la segunda fila (√≠ndice 1)
    
    # 1. #"Filas filtradas1" = Table.SelectRows(..., each ([Column1] <> ""))
    # Filtra filas donde la columna CONCEPTO (que es la primera columna del M Code) no es nula/vac√≠a
    df_filtrado = df_paso.dropna(subset=['CONCEPTO']).copy() 

    # 2. #"Encabezados promovidos" (Ya manejado arriba)
    
    # 3. #"Otras columnas quitadas1" = Table.SelectColumns(...)
    # Nos aseguramos de que las columnas existan antes de seleccionarlas
    columnas_presentes = [col for col in COLUMNAS_FINALES if col in df_filtrado.columns]
    df_seleccionado = df_filtrado[columnas_presentes].copy()
    
    # 4. #"Personalizada agregada" = Table.AddColumn(..., "CONCEPTO CAPACIDAD", each "")
    df_seleccionado["CONCEPTO CAPACIDAD"] = ""
    
    # 5. #"Columna de anulaci√≥n de dinamizaci√≥n" = Table.UnpivotOtherColumns(...)
    
    # Columnas que contienen los valores a desdinamizar (todas las que no son ID_VARS_UNPIVOT)
    # Se debe verificar que las columnas de ID est√©n presentes
    id_vars_unpivot_presentes = [col for col in ID_VARS_UNPIVOT if col in df_seleccionado.columns]
    
    value_vars_unpivot = [col for col in df_seleccionado.columns if col not in id_vars_unpivot_presentes]
    
    df_unpivot = pd.melt(
        df_seleccionado, 
        id_vars=id_vars_unpivot_presentes,
        value_vars=value_vars_unpivot,
        var_name="TIPO SALDO",  # Nombre del encabezado que conten√≠a los valores (VALOR TOPE, etc.)
        value_name="CONCEPTO REPORTE" # Los valores de las celdas
    )
    
    # 6. #"Tipo cambiado" = Table.TransformColumnTypes(...)
    
    # Convertir "ORDEN" a entero (Int64.Type)
    df_unpivot['ORDEN'] = pd.to_numeric(df_unpivot['ORDEN'], errors='coerce').astype('Int64')
    
    # Convertir las dem√°s columnas de texto a tipo string
    for col in ["CONCEPTO", "UNIDAD", "SECCION", "CONCEPTO 2", "CONCEPTO REPORTE", "CONCEPTO CAPACIDAD", "TIPO SALDO"]:
        if col in df_unpivot.columns:
            df_unpivot[col] = df_unpivot[col].astype(str)
            
    print("‚úîÔ∏è Transformaciones completadas con √©xito.")
    return df_unpivot

# ----------------------------------------------------------------------------------
# --- EJECUCI√ìN DEL FLUJO Y EXPORTACI√ìN ---
# ----------------------------------------------------------------------------------

if __name__ == '__main__':
    
    df_resultado = transformar_hoja_datos()
    
    if df_resultado.empty:
        print("üõë El DataFrame final est√° vac√≠o. Finalizando.")
        exit()
    
    # EXPORTACI√ìN DEL RESULTADO A LA CARPETA DE DESCARGAS
    output_filename = 'ext_data_gsheet.xlsx' # Cambiamos la extensi√≥n a .xlsx
    
    try:
        # 1. Determinar la ruta de la carpeta de Descargas
        descargas_dir = Path.home() / 'Downloads'
        descargas_dir.mkdir(parents=True, exist_ok=True) 
        output_path = descargas_dir / output_filename

        # 2. Exportar el DataFrame a Excel
        # engine='xlsxwriter' se usa a menudo por defecto, pero se especifica para claridad.
        # index=False: No incluye el √≠ndice de Pandas en el archivo.
        df_resultado.to_excel(output_path, index=False, engine='xlsxwriter')
        
        print("\n================ EXPORTACI√ìN ================")
        print(f"‚úÖ Exportaci√≥n exitosa a Excel. Archivo guardado en:")
        print(f"{output_path}")

    except ImportError:
        print("\n‚ùå Error: La librer√≠a 'xlsxwriter' o 'openpyxl' no est√° instalada.")
        print("Ejecuta 'pip install openpyxl' o 'pip install xlsxwriter' para corregirlo.")
    except Exception as e:
        print(f"‚ùå Error cr√≠tico al exportar el archivo: {e}")
        
    # Resultado final
    print("\n================ RESULTADO FINAL EN MEMORIA ================")
    print(f"Filas finales: {len(df_resultado)}")
    print(df_resultado.head())